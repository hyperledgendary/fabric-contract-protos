trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: BuildLedgerImage
  displayName: 'Build proto image'
  steps:
  - script: |
      # Substitute BIN for your bin directory.
      # Substitute VERSION for the current released version.
      # Substitute BINARY_NAME for "buf", "protoc-gen-buf-check-breaking", or "protoc-gen-buf-check-lint".
      BIN="$(Pipeline.Workspace)/.bin/" && \
      VERSION="0.15.0" && \
      BINARY_NAME="buf" && \
        mkdir -p "${BIN}" && \
        curl -sSL \
          "https://github.com/bufbuild/buf/releases/download/v${VERSION}/${BINARY_NAME}-$(uname -s)-$(uname -m)" \
          -o "${BIN}/${BINARY_NAME}" && \
        chmod +x "${BIN}/${BINARY_NAME}" && \
        echo "##vso[task.prependpath]$(Pipeline.Workspace)/.bin/"
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'Get dependencies'

  - script: |
      buf ls-files
      buf check lint
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'Lint'

  - script: |
      buf image build -o ledger-image.bin --file protos/contract_messages.proto --file protos/ledger_messages.proto
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'Build'

  - publish: $(System.DefaultWorkingDirectory)/ledger-image.bin
    artifact: LedgerImage

- job: GenerateGoLib
  displayName: 'Generate Go lib'
  dependsOn: BuildLedgerImage

  variables:
    GOBIN:  '$(GOPATH)/bin'
    GOPATH: '$(system.defaultWorkingDirectory)/go'

  steps:
  - download: current
    artifact: LedgerImage

  - task: GoTool@0
    inputs:
      version: '1.13.5'

  - task: Go@0
    displayName: 'go get protoc-gen-go'
    inputs:
      command: get
      arguments: '-u github.com/golang/protobuf/protoc-gen-go'

  - template: .azure-pipelines/install-protoc.yml

  - script: |
      export PATH=$PATH:$GOBIN && \
        mkdir -p out/golang && \
        protoc -I=protos --descriptor_set_in=$(Pipeline.Workspace)/LedgerImage/ledger-image.bin --go_out=out/golang protos/common_messages.proto protos/contract_messages.proto protos/ledger_messages.proto && \
        mv out/golang/https:/github.com/hyperledgendary/fabric-ledger-protos-go/contract fabric-ledger-protos-go
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'Generate lib'

  - task: Go@0
    inputs:
      command: 'build'
      workingDirectory: '$(System.DefaultWorkingDirectory)/fabric-ledger-protos-go'
    displayName: 'Build lib'

  - publish: $(System.DefaultWorkingDirectory)/fabric-ledger-protos-go
    artifact: GoLib

- job: GenerateRustLib
  displayName: 'Generate Rust lib'
  dependsOn: BuildLedgerImage

  steps:
  - download: current
    artifact: LedgerImage

  - script: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path --default-toolchain default
      echo "##vso[task.prependpath]$HOME/.cargo/bin"
    displayName: 'Install rust'

  - script: |
      cargo install protobuf-codegen
    displayName: 'Install protoc-gen-rust'

  - template: .azure-pipelines/install-protoc.yml

  - script: |
      mkdir -p out/rust && \
        protoc -I=protos --descriptor_set_in=$(Pipeline.Workspace)/LedgerImage/ledger-image.bin --rust_out=out/rust protos/common_messages.proto protos/contract_messages.proto protos/ledger_messages.proto && \
        mv out/rust/*.rs fabric-ledger-protos-rust/src
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'Generate lib'

  - script: |
      cargo publish --allow-dirty --dry-run
    workingDirectory: '$(System.DefaultWorkingDirectory)/fabric-ledger-protos-rust'
    displayName: 'Build lib'

  - publish: $(System.DefaultWorkingDirectory)/fabric-ledger-protos-rust
    artifact: RustLib

- job: GenerateNodeLib
  displayName: 'Generate Node lib'
  dependsOn: BuildLedgerImage

  steps:
  - download: current
    artifact: LedgerImage

  - template: .azure-pipelines/install-protoc.yml

  - script: |
       npm install
    workingDirectory: '$(System.DefaultWorkingDirectory)/fabric-ledger-protos-node'

  - script: |
      export PROTOC_GEN_TS_PATH="$(System.DefaultWorkingDirectory)/fabric-ledger-protos-node/node_modules/.bin/protoc-gen-ts"
      export OUT_DIR=$(System.DefaultWorkingDirectory)/fabric-ledger-protos-node/
      protoc -I=protos --plugin="protoc-gen-ts=${PROTOC_GEN_TS_PATH}" --descriptor_set_in=$(Pipeline.Workspace)/LedgerImage/ledger-image.bin --js_out="import_style=commonjs,binary:${OUT_DIR}" --ts_out="${OUT_DIR}"    protos/contract_messages.proto protos/ledger_messages.proto 
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: 'Generate lib'

  - script: |
      npm pack
    workingDirectory: '$(System.DefaultWorkingDirectory)/fabric-ledger-protos-node'
    displayName: 'Build lib'

  - publish: $(System.DefaultWorkingDirectory)/fabric-ledger-protos-node/fabric-ledger-protos-node-1.0.0.tgz
    artifact: npm_tgz
